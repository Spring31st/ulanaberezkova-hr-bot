import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web
from collections import Counter

# ---------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

with open('data.json', encoding='utf-8') as f:
    data = json.load(f)

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.error("TOKEN is missing")
    exit(1)

ALLOWED_IDS = data.get("allowed_user_ids", [])
ADMIN_IDS   = data.get("admin_ids", [])
HR_CONTACTS = data.get("hr_contacts", {})

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_states = {}
PAGE_SIZE = 7
PARSE_MODE = "Markdown"
STATS_FILE = "stats.json"
REMINDERS_FILE = "reminders.json"

# ---------- helpers ----------
def allowed(uid): return uid in ALLOWED_IDS
def is_admin(uid): return uid in ADMIN_IDS

# ---------- stats ----------
def load_stats():
    if not os.path.exists(STATS_FILE):
        return {"helpful": Counter(), "not_helpful": Counter()}
    with open(STATS_FILE, encoding='utf-8') as f:
        raw = json.load(f)
    return {"helpful": Counter(raw["helpful"]),
            "not_helpful": Counter(raw["not_helpful"])}

def save_stats(stats):
    with open(STATS_FILE, 'w', encoding='utf-8') as f:
        json.dump({k: dict(v) for k, v in stats.items()}, f, ensure_ascii=False, indent=2)

stats = load_stats()

# ---------- reminders ----------
def load_reminders():
    if not os.path.exists(REMINDERS_FILE):
        return {}
    with open(REMINDERS_FILE, encoding='utf-8') as f:
        raw = json.load(f)
    return {int(uid): lst for uid, lst in raw.items()}

def save_reminders(reminders):
    with open(REMINDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)

reminders = load_reminders()
next_remind_id = max(
    [r["id"] for lst in reminders.values() for r in lst], default=0
) + 1

async def reminder_worker():
    """–†–∞–∑ –≤ –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    global reminders, next_remind_id
    while True:
        now = datetime.now()
        to_delete = []
        for uid, lst in reminders.items():
            still_active = []
            for r in lst:
                dt = datetime.strptime(r["dt_str"], "%d.%m.%Y %H:%M")
                if dt <= now:
                    try:
                        await bot.send_message(
                            uid,
                            f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:*\n{r['text']}",
                            parse_mode="Markdown"
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {r['id']} —é–∑–µ—Ä—É {uid}: {e}")
                    to_delete.append((uid, r["id"]))
                else:
                    still_active.append(r)
            reminders[uid] = still_active
        for uid, rid in to_delete:
            reminders[uid] = [r for r in reminders.get(uid, []) if r["id"] != rid]
        reminders = {k: v for k, v in reminders.items() if v}
        save_reminders(reminders)
        await asyncio.sleep(60)

# ---------- HTTP ----------
routes = web.RouteTableDef()
@routes.get('/')
async def health(request):
    return web.Response(text="OK")

async def run_http():
    app = web.Application()
    app.add_routes(routes)
    runner = web.AppRunner(app)
    await runner.setup()
    await web.TCPSite(runner, '0.0.0.0', int(os.getenv("PORT", 10000))).start()

# ---------- –ø–∞–≥–∏–Ω–∞—Ü–∏—è ----------
def paginate(items: list[str], page: int, prefix: str):
    kb = InlineKeyboardBuilder()
    start = page * PAGE_SIZE
    for idx, text in enumerate(items[start:start + PAGE_SIZE], start):
        kb.button(text=text, callback_data=f"{prefix}_{idx}")
    kb.adjust(1)
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{prefix}_prev_{page-1}"))
    if start + PAGE_SIZE < len(items):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{prefix}_next_{page+1}"))
    if nav:
        kb.row(*nav)
    return kb.as_markup()

# ---------- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
def main_menu_kb(user_id: int) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="cat_0")],
        [InlineKeyboardButton(text="üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="remind_start")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")]
    ]
    if user_id in ADMIN_IDS:
        kb.insert(0, [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
@dp.message(Command("start"))
async def cmd_start(msg: Message):
    if not allowed(msg.from_user.id):
        await msg.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await msg.answer("üëã –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=main_menu_kb(msg.from_user.id))

@dp.message(Command("stats"))
async def cmd_stats(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
        return
    not_help = stats["not_helpful"]
    if not not_help:
        await msg.answer("üìä –ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ ¬´–Ω–µ –ø–æ–º–æ–≥¬ª.")
        return
    top = not_help.most_common(5)
    lines = [f"{idx+1}. {q} ‚Äî {cnt}" for idx, (q, cnt) in enumerate(top)]
    await msg.answer("üìâ –¢–û–ü-5 ¬´–Ω–µ –ø–æ–º–æ–≥¬ª:\n" + "\n".join(lines))

# ---------- –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ----------
@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def pick_category(callback: CallbackQuery):
    uid = callback.from_user.id
    if not allowed(uid):
        return

    if callback.data.startswith(("cat_prev_", "cat_next_")):
        _, _, _, page = callback.data.split("_")
        cat_names = [c["name"] for c in data["categories"]]
        await callback.message.edit_reply_markup(
            reply_markup=paginate(cat_names, int(page), "cat")
        )
        await callback.answer()
        return

    cat_idx = int(callback.data.split("_")[1])
    category = data["categories"][cat_idx]
    user_states[uid] = {"cat": category["id"]}

    q_titles = [q["question"] for q in category["questions"]]
    kb = paginate(q_titles, 0, "q")
    kb.inline_keyboard.append(
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    )
    await callback.message.edit_text(
        f"üìÇ *{category['name']}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        parse_mode=PARSE_MODE,
        reply_markup=kb
    )
    await callback.answer()

# ---------- –≤–æ–ø—Ä–æ—Å—ã ----------
@dp.callback_query(lambda c: c.data.startswith("q_"))
async def pick_question(callback: CallbackQuery):
    uid = callback.from_user.id
    if not allowed(uid):
        return

    if callback.data.startswith(("q_prev_", "q_next_")):
        _, _, _, page = callback.data.split("_")
        cat_id = user_states.get(uid, {}).get("cat")
        category = next(c for c in data["categories"] if c["id"] == cat_id)
        q_titles = [q["question"] for q in category["questions"]]
        await callback.message.edit_reply_markup(
            reply_markup=paginate(q_titles, int(page), "q")
        )
        await callback.answer()
        return

    q_idx = int(callback.data.split("_")[1])
    cat_id = user_states[uid]["cat"]
    category = next(c for c in data["categories"] if c["id"] == cat_id)
    question = category["questions"][q_idx]
    user_states[uid]["q"] = question["id"]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –ü–æ–º–æ–≥", callback_data="helpful_yes"),
         InlineKeyboardButton(text="üëé –ù–µ –ø–æ–º–æ–≥", callback_data="helpful_no")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await callback.message.answer(
        question["answer"],
        parse_mode=PARSE_MODE,
        reply_markup=kb
    )
    await callback.answer()

# ---------- –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ----------
@dp.callback_query(lambda c: c.data in {"helpful_yes", "helpful_no"})
async def feedback(callback: CallbackQuery):
    uid = callback.from_user.id
    q = user_states.get(uid, {}).get("q", "unknown")

    if callback.data == "helpful_yes":
        stats["helpful"][str(q)] += 1
        text = "‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!*"
    else:
        stats["not_helpful"][str(q)] += 1
        lines = ["üòî *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å.*", "", "üìû *HR-–æ—Ç–¥–µ–ª:*"]
        if HR_CONTACTS.get("email"):
            lines.append(f"üìß *E-mail:* {HR_CONTACTS['email']}")
        if HR_CONTACTS.get("phone"):
            lines.append(f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {HR_CONTACTS['phone']}")
        for tg in HR_CONTACTS.get("telegram", []):
            if tg:
                lines.append(f"üí¨ *Telegram:* {tg}")
        text = "\n".join(lines)
    save_stats(stats)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )
    await callback.message.answer(text, parse_mode=PARSE_MODE, reply_markup=kb)
    await callback.answer()

# ---------- –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º) ----------
@dp.callback_query(lambda c: c.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery):
    if not allowed(callback.from_user.id):
        return
    await callback.message.edit_text(
        "üëã –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=main_menu_kb(callback.from_user.id)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "remind_start")
async def remind_start(callback: CallbackQuery):
    if not allowed(callback.from_user.id):
        return
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∂–¥—ë–º –¥–∞—Ç—É
    user_states[callback.from_user.id]["wait_remind"] = "date"
    await callback.answer()

@dp.message()
async def handle_remind(msg: Message):
    uid = msg.from_user.id
    if not allowed(uid) or uid not in user_states:
        return
    state = user_states[uid].get("wait_remind")
    if not state:
        return  # –Ω–µ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å

    if state == "date":
        try:
            datetime.strptime(msg.text, "%d.%m.%Y")
        except ValueError:
            await msg.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        user_states[uid]["wait_remind"] = "time"
        user_states[uid]["remind_date"] = msg.text
        await msg.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:30):")
    elif state == "time":
        try:
            datetime.strptime(msg.text, "%H:%M")
        except ValueError:
            await msg.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú:")
            return
        user_states[uid]["wait_remind"] = "text"
        user_states[uid]["remind_time"] = msg.text
        await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    elif state == "text":
        global next_remind_id
        dt_str = f"{user_states[uid]['remind_date']} {user_states[uid]['remind_time']}"
        try:
            dt = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
        except ValueError:
            await msg.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.")
            return
        if dt <= datetime.now():
            await msg.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
            return
        reminders.setdefault(uid, []).append(
            {"id": next_remind_id, "dt_str": dt_str, "text": msg.text}
        )
        next_remind_id += 1
        save_reminders(reminders)
        del user_states[uid]["wait_remind"]
        await msg.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=main_menu_kb(uid))

@dp.callback_query(lambda c: c.data == "list_reminders")
async def list_reminders(callback: CallbackQuery):
    uid = callback.from_user.id
    if not allowed(uid):
        return
    lst = reminders.get(uid, [])
    if not lst:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            )
        )
        await callback.answer()
        return
    kb_rows = []
    for r in lst:
        kb_rows.append([
            InlineKeyboardButton(text=f"{r['dt_str']} ‚Äì {r['text'][:30]}", callback_data="noop"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"delrem_{r['id']}")
        ])
    kb_rows.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    await callback.message.edit_text(
        "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delrem_"))
async def del_remind(callback: CallbackQuery):
    uid = callback.from_user.id
    if not allowed(uid):
        return
    rid = int(callback.data.split("_")[1])
    reminders[uid] = [r for r in reminders.get(uid, []) if r["id"] != rid]
    reminders = {k: v for k, v in reminders.items() if v}
    save_reminders(reminders)
    await callback.answer("üóë –£–¥–∞–ª–µ–Ω–æ!")
    await list_reminders(callback)

# ---------- –∑–∞–ø—É—Å–∫ ----------
async def main():
    asyncio.create_task(reminder_worker())
    await asyncio.gather(run_http(), dp.start_polling(bot, skip_updates=True))

if __name__ == "__main__":
    asyncio.run(main())
