import os
import json
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import Command
import asyncio
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ data.json
try:
    with open('data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data['categories'])} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
    raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN", "")
if not TOKEN:
    logger.error("TOKEN is missing")
    exit(1)

ALLOWED_IDS = data.get("allowed_user_ids", [])
user_states = {}

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–æ–Ω—Ç–∞–∫—Ç—ã HR
HR_CONTACTS = data.get("hr_contacts", {
    "email": "üìß hr@company.com",
    "phone": "üìû +7 (495) 123-45-67",
    "telegram": "üí¨ @hr_support"
})

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è UptimeRobot
routes = web.RouteTableDef()

@routes.get('/')
async def health(request):
    return web.Response(text="OK")

async def run_http():
    app = web.Application()
    app.add_routes(routes)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"HTTP listening on 0.0.0.0:{port}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
def get_menu(user_id):
    current = user_states.get(user_id)
    if current is None:
        buttons = [[KeyboardButton(text=cat["name"])] for cat in data["categories"]]
    else:
        category = next((c for c in data["categories"] if c["id"] == current), None)
        if not category:
            user_states[user_id] = None
            return get_menu(user_id)
        buttons = [[KeyboardButton(text=q["question"])] for q in category["questions"]]
        buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_feedback_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üëç –ü–æ–º–æ–≥", callback_data="helpful_yes"),
            InlineKeyboardButton(text="üëé –ù–µ –ø–æ–º–æ–≥", callback_data="helpful_no")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_hr_contacts():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã HR –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥"""
    return (
        "üìû **HR-–æ—Ç–¥–µ–ª:**\n"
        f"{HR_CONTACTS.get('email', '')}\n"
        f"{HR_CONTACTS.get('phone', '')}\n"
        f"{HR_CONTACTS.get('telegram', '')}"
    )

def allowed(uid):
    return uid in ALLOWED_IDS

@dp.message(Command("start"))
async def cmd_start(msg: Message):
    uid = msg.from_user.id
    if not allowed(uid):
        await msg.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    user_states[uid] = None
    await msg.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_menu(uid)
    )

@dp.message()
async def handle(msg: Message):
    uid = msg.from_user.id
    if not allowed(uid):
        await msg.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    text = msg.text.strip()

    if text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        user_states[uid] = None
        await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_menu(uid)
        )
        return

    cur = user_states.get(uid)
    if cur is None:  # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat in data["categories"]:
            if cat["name"] == text:
                user_states[uid] = cat["id"]
                await msg.answer(
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
                    reply_markup=get_menu(uid)
                )
                return
        await msg.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.",
            reply_markup=get_menu(uid)
        )
    else:  # –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞
        category = next((c for c in data["categories"] if c["id"] == cur), None)
        if not category:
            user_states[uid] = None
            await msg.answer(
                "‚ùå –û—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_menu(uid)
            )
            return
        
        for q in category["questions"]:
            if q["question"] == text:
                await msg.answer(
                    q["answer"],
                    reply_markup=get_feedback_keyboard()
                )
                return
        
        await msg.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_menu(uid)
        )

@dp.callback_query()
async def handle_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    uid = callback_query.from_user.id
    if not allowed(uid):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    message = callback_query.message
    data = callback_query.data
    
    if data == "helpful_yes":
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.edit_text(
            f"{message.text}\n\n‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!**",
            parse_mode="HTML"
        )
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ!")
        
    elif data == "helpful_no":
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã HR
        contacts = format_hr_contacts()
        await message.edit_text(
            f"{message.text}\n\nüòî **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å**\n\n{contacts}",
            parse_mode="HTML"
        )
        await callback_query.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã HR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

async def main():
    await asyncio.gather(run_http(), dp.start_polling(bot, skip_updates=True))

if __name__ == "__main__":
    asyncio.run(main())
